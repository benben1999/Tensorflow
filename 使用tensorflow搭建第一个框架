1数据预处理，设置占位符
2搭建网络
3计算损失函数,用于train
4写出train_stap
5初始化
6运行train_step

import tensorflow as tf
import numpy as np
def add_layer(inputs,in_size,out_size,activation_function=None):
    Weights = tf.Variable(tf.random_normal([in_size,out_size]))
    biases = tf.Variable(tf.zeros([1,out_size])+0.1)
    Wx_plus_b = tf.matmul(inputs,Weights) + biases #输入是每条数据为一个行向量，若干数据构成了一个矩阵
    if activation_function is None:
        outputs = Wx_plus_b
    else:
        outputs = activation_function(Wx_plus_b)
    return outputs
x_data = np.linspace(-1,1,300,dtype = np.float32)[:,np.newaxis]#np.newaxis 把x变成了（300,1）数组
noise = np.random.normal(0, 0.05, x_data.shape).astype(np.float32)#numpy中用np.random.normal , tensorflow 中用tf.random_normal 生成随机数
y_data = np.square(x_data) - 0.5 + noise
xs = tf.placeholder(tf.float32,[None,1])
ys = tf.placeholder(tf.float32,[None,1])
#输入层并不是真实存在的，它只不过是一个矩阵
#输出的数量代表有几个神经元，代表是哪一层
#输入层实际上就是第一个隐藏层中的输入神经元
#从神经元的角度理解输入层和输出层
#添加一层就是添加一个输出向量的计算公式
l1 = add_layer(xs,1,10,activation_function = tf.nn.relu)

prediction = add_layer(l1,10,1,activation_function = None)

loss = tf.reduce_mean(tf.reduce_sum(tf.square(ys-prediction),reduction_indices=[1]))

train_step = tf.train.GradientDescentOptimizer(0.1).minimize(loss)

init = tf.global_variables_initializer()

sess = tf.Session()

sess.run(init)

for i in range(1500):
    sess.run(train_step,feed_dict = {xs:x_data , ys : y_data})
    if i%50 ==0:
        print(sess.run(loss,feed_dict ={ xs: x_data , ys: y_data}))
        
